
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';

export interface OrderItem {
  name: string;
  quantity: number;
  price?: number;
}

export interface Order {
  id: string;
  order_number: string;
  customer_id?: string;
  customer_name: string;
  customer_phone?: string;
  items: string;
  items_detail?: Record<string, OrderItem>;
  status: 'received' | 'processing' | 'ready' | 'completed' | 'delayed';
  priority: 'low' | 'normal' | 'urgent';
  amount: number;
  quality_score: number;
  date_received: string;
  due_date: string;
  completed_date?: string;
  created_at: string;
  updated_at: string;
}

export const useOrders = (page: number = 1, limit: number = 10, searchTerm?: string, statusFilter?: string) => {
  return useQuery({
    queryKey: ['orders', page, limit, searchTerm, statusFilter],
    queryFn: async () => {
      let query = supabase
        .from('orders')
        .select('*', { count: 'exact' })
        .order('created_at', { ascending: false });

      // Apply filters
      if (searchTerm) {
        query = query.or(`customer_name.ilike.%${searchTerm}%,order_number.ilike.%${searchTerm}%`);
      }

      if (statusFilter && statusFilter !== 'all') {
        query = query.eq('status', statusFilter);
      }

      // Apply pagination
      const from = (page - 1) * limit;
      const to = from + limit - 1;
      query = query.range(from, to);

      const { data, error, count } = await query;

      if (error) throw error;
      
      // Transform the data to match our Order interface
      const transformedData: Order[] = (data || []).map(order => ({
        ...order,
        items_detail: order.items_detail as Record<string, OrderItem> || {}
      }));

      return { 
        orders: transformedData, 
        totalCount: count || 0,
        totalPages: Math.ceil((count || 0) / limit)
      };
    },
  });
};

export const useCreateOrder = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async (order: Omit<Order, 'id' | 'order_number' | 'created_at' | 'updated_at'>) => {
      const { data, error } = await supabase
        .from('orders')
        .insert({
          ...order,
          order_number: '', // Will be auto-generated by the trigger
          items_detail: order.items_detail as any || {}
        })
        .select()
        .single();

      if (error) throw error;
      return data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['orders'] });
    },
  });
};

export const useUpdateOrder = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async ({ id, ...updates }: Partial<Order> & { id: string }) => {
      const updateData = {
        ...updates,
        items_detail: updates.items_detail as any
      };

      const { data, error } = await supabase
        .from('orders')
        .update(updateData)
        .eq('id', id)
        .select()
        .single();

      if (error) throw error;
      return data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['orders'] });
    },
  });
};

export const useDeleteOrder = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async (id: string) => {
      const { error } = await supabase
        .from('orders')
        .delete()
        .eq('id', id);

      if (error) throw error;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['orders'] });
    },
  });
};

export const useUpdateOrderStatus = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async ({ id, status }: { id: string; status: Order['status'] }) => {
      const updates: any = { status };
      
      // Set completed_date when status changes to completed
      if (status === 'completed') {
        updates.completed_date = new Date().toISOString();
      } else if (status !== 'completed') {
        updates.completed_date = null;
      }

      const { data, error } = await supabase
        .from('orders')
        .update(updates)
        .eq('id', id)
        .select()
        .single();

      if (error) throw error;
      return data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['orders'] });
    },
  });
};
